{"remainingRequest":"/Users/corygreen/Desktop/music-notation-project/node_modules/babel-loader/lib/index.js!/Users/corygreen/Desktop/music-notation-project/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/corygreen/Desktop/music-notation-project/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/corygreen/Desktop/music-notation-project/src/components/Chord.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/corygreen/Desktop/music-notation-project/src/components/Chord.vue","mtime":1643223943761},{"path":"/Users/corygreen/Desktop/music-notation-project/babel.config.js","mtime":1642660855000},{"path":"/Users/corygreen/Desktop/music-notation-project/node_modules/cache-loader/dist/cjs.js","mtime":1642660805000},{"path":"/Users/corygreen/Desktop/music-notation-project/node_modules/babel-loader/lib/index.js","mtime":1642660805000},{"path":"/Users/corygreen/Desktop/music-notation-project/node_modules/cache-loader/dist/cjs.js","mtime":1642660805000},{"path":"/Users/corygreen/Desktop/music-notation-project/node_modules/vue-loader/lib/index.js","mtime":1642660804000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC1pbmRleC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZS5qcyI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmV4cG9ydCBkZWZhdWx0IHsKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgY2hvcmQ6IFtdLAogICAgICBjaG9yZE5hbWU6ICcnLAogICAgICBjdXJyZW50VHVuaW5nOiBbXQogICAgfTsKICB9LAogIHByb3BzOiB7CiAgICB0YWJDb2x1bW46IHsKICAgICAgZGVmYXVsdDogMAogICAgfQogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIGdldEN1cnJlbnRTdHJpbmdDb3VudDogZnVuY3Rpb24gZ2V0Q3VycmVudFN0cmluZ0NvdW50KCkgewogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuc2VsZXRlY3RlZE51bWJlck9mU3RyaW5nczsKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIHRhYkVudGVyZWQ6IGZ1bmN0aW9uIHRhYkVudGVyZWQoJGV2ZW50LCBpKSB7CiAgICAgIGlmICgkZXZlbnQgIT09ICcnKSB7CiAgICAgICAgdmFyIG5vdGUgPSB7CiAgICAgICAgICBmcmV0OiAkZXZlbnQsCiAgICAgICAgICBzdHJpbmc6IGksCiAgICAgICAgICBzdHJpbmdOb3RlOiB0aGlzLmdldEN1cnJlbnRUdW5pbmcoKVtpIC0gMV0sCiAgICAgICAgICBuZXdOb3RlOiAnJwogICAgICAgIH07CiAgICAgICAgdmFyIHJldHVybmVkTm90ZSA9IHRoaXMubm90ZU5hbWUobm90ZSk7CiAgICAgICAgbm90ZS5uZXdOb3RlID0gcmV0dXJuZWROb3RlOwoKICAgICAgICBpZiAodGhpcy5jaG9yZC5sZW5ndGggPT09IDApIHsKICAgICAgICAgIHRoaXMuY2hvcmQucHVzaChub3RlKTsKICAgICAgICB9IC8vIGNoZWNraW5nIHRvIHNlZSBpZiBhIG5vdGUgZXhpc3RzIG9uIHRoZSBzdHJpbmcgYWxyZWFkeSAvLwogICAgICAgIC8vIGlmIGl0IGRvZXMsIHJlcGxhY2UgaXQgd2l0aCB3aGF0cyBvbiB0aGUgZnJldCAvLwogICAgICAgIC8vIGlmIG5vdCwgdGhlbiBhZGQgaXQgLy8KCgogICAgICAgIHZhciBpbmRleDEgPSB0aGlzLmNob3JkLmZpbmRJbmRleChmdW5jdGlvbiAoZWxlKSB7CiAgICAgICAgICByZXR1cm4gZWxlLnN0cmluZyA9PT0gbm90ZS5zdHJpbmc7CiAgICAgICAgfSk7CgogICAgICAgIGlmIChpbmRleDEgIT09IC0xKSB7CiAgICAgICAgICB0aGlzLmNob3JkW2luZGV4MV0gPSBub3RlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLmNob3JkLnB1c2gobm90ZSk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIC8vIGlmIHRoZSBzdHJpbmcgaXMgZW1wdHksIHJlbW92ZSBpdCBmcm9tIHRoZSBhcnJheSAvLwogICAgICAgIHZhciBpbmRleDIgPSB0aGlzLmNob3JkLmZpbmRJbmRleChmdW5jdGlvbiAoZWxlKSB7CiAgICAgICAgICByZXR1cm4gZWxlLnN0cmluZyA9PT0gaTsKICAgICAgICB9KTsKCiAgICAgICAgaWYgKGluZGV4MiAhPT0gLTEpIHsKICAgICAgICAgIHRoaXMuY2hvcmQuc3BsaWNlKGluZGV4MiwgMSk7CiAgICAgICAgfQogICAgICB9CgogICAgICB0aGlzLmFuYWx5emluZ05vdGVzKCk7CiAgICB9LAogICAgZ2V0Q3VycmVudFR1bmluZzogZnVuY3Rpb24gZ2V0Q3VycmVudFR1bmluZygpIHsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLm92ZXJhbGxUdW5pbmdOb3RlczsKICAgIH0sCiAgICBub3RlTmFtZTogZnVuY3Rpb24gbm90ZU5hbWUobm90ZSkgewogICAgICB2YXIgY3VycmVudFR1bmluZyA9IHRoaXMuZ2V0Q3VycmVudFR1bmluZygpOwogICAgICB2YXIgbm90ZXMgPSB0aGlzLiRzdG9yZS5zdGF0ZS50dW5pbmdzTGlzdDsKICAgICAgdmFyIHN0YXJ0aW5nTm90ZSA9IGN1cnJlbnRUdW5pbmdbbm90ZS5zdHJpbmcgLSAxXTsKICAgICAgdmFyIGVudGVyZWROb3RlSW5kZXggPSBub3Rlcy5pbmRleE9mKHN0YXJ0aW5nTm90ZSkgKyBwYXJzZUludChub3RlLmZyZXQpOwogICAgICB2YXIgYWN0dWFsTm90ZUluZGV4ID0gZW50ZXJlZE5vdGVJbmRleCAlIG5vdGVzLmxlbmd0aDsKICAgICAgcmV0dXJuIG5vdGVzW2FjdHVhbE5vdGVJbmRleF07CiAgICB9LAogICAgYW5hbHl6aW5nTm90ZXM6IGZ1bmN0aW9uIGFuYWx5emluZ05vdGVzKCkgewogICAgICAvLyBmaXJzdCBJIHRoaW5rIEkgbmVlZCB0byBnZXQgbXkgY2hvcmQgbm90ZSBjb3VudCAvLwogICAgICB2YXIgbm90ZUNvdW50SW5DaG9yZCA9IHRoaXMuY2hvcmQubGVuZ3RoOwogICAgICBjb25zb2xlLmxvZygnQ2hvcmQgbm90ZSBjb3VudCAtPiAnLCBub3RlQ291bnRJbkNob3JkKTsKCiAgICAgIGZvciAodmFyIGwgaW4gdGhpcy5jaG9yZCkgewogICAgICAgIGNvbnNvbGUubG9nKHRoaXMuY2hvcmRbbF0ubmV3Tm90ZSk7CiAgICAgIH0KICAgIH0sCiAgICBmaWd1cmVPdXRSb290Tm90ZTogZnVuY3Rpb24gZmlndXJlT3V0Um9vdE5vdGUoKSB7fQogIH0KfTs="},{"version":3,"sources":["Chord.vue"],"names":[],"mappings":";;;;;;;;;;;AAUA,eAAA;AACA,EAAA,IADA,kBACA;AACA,WAAA;AACA,MAAA,KAAA,EAAA,EADA;AAEA,MAAA,SAAA,EAAA,EAFA;AAGA,MAAA,aAAA,EAAA;AAHA,KAAA;AAKA,GAPA;AAQA,EAAA,KAAA,EAAA;AACA,IAAA,SAAA,EAAA;AACA,MAAA,OAAA,EAAA;AADA;AADA,GARA;AAaA,EAAA,QAAA,EAAA;AACA,IAAA,qBADA,mCACA;AACA,aAAA,KAAA,MAAA,CAAA,KAAA,CAAA,yBAAA;AACA;AAHA,GAbA;AAkBA,EAAA,OAAA,EAAA;AACA,IAAA,UADA,sBACA,MADA,EACA,CADA,EACA;AACA,UAAA,MAAA,KAAA,EAAA,EAAA;AACA,YAAA,IAAA,GAAA;AACA,UAAA,IAAA,EAAA,MADA;AAEA,UAAA,MAAA,EAAA,CAFA;AAGA,UAAA,UAAA,EAAA,KAAA,gBAAA,GAAA,CAAA,GAAA,CAAA,CAHA;AAIA,UAAA,OAAA,EAAA;AAJA,SAAA;AAMA,YAAA,YAAA,GAAA,KAAA,QAAA,CAAA,IAAA,CAAA;AACA,QAAA,IAAA,CAAA,OAAA,GAAA,YAAA;;AAEA,YAAA,KAAA,KAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,eAAA,KAAA,CAAA,IAAA,CAAA,IAAA;AACA,SAZA,CAcA;AACA;AACA;;;AACA,YAAA,MAAA,GAAA,KAAA,KAAA,CAAA,SAAA,CAAA,UAAA,GAAA;AAAA,iBAAA,GAAA,CAAA,MAAA,KAAA,IAAA,CAAA,MAAA;AAAA,SAAA,CAAA;;AACA,YAAA,MAAA,KAAA,CAAA,CAAA,EAAA;AACA,eAAA,KAAA,CAAA,MAAA,IAAA,IAAA;AACA,SAFA,MAEA;AACA,eAAA,KAAA,CAAA,IAAA,CAAA,IAAA;AACA;AACA,OAvBA,MAuBA;AACA;AACA,YAAA,MAAA,GAAA,KAAA,KAAA,CAAA,SAAA,CAAA,UAAA,GAAA;AAAA,iBAAA,GAAA,CAAA,MAAA,KAAA,CAAA;AAAA,SAAA,CAAA;;AACA,YAAA,MAAA,KAAA,CAAA,CAAA,EAAA;AACA,eAAA,KAAA,CAAA,MAAA,CAAA,MAAA,EAAA,CAAA;AACA;AACA;;AACA,WAAA,cAAA;AACA,KAjCA;AAkCA,IAAA,gBAlCA,8BAkCA;AACA,aAAA,KAAA,MAAA,CAAA,KAAA,CAAA,kBAAA;AACA,KApCA;AAqCA,IAAA,QArCA,oBAqCA,IArCA,EAqCA;AACA,UAAA,aAAA,GAAA,KAAA,gBAAA,EAAA;AACA,UAAA,KAAA,GAAA,KAAA,MAAA,CAAA,KAAA,CAAA,WAAA;AAEA,UAAA,YAAA,GAAA,aAAA,CAAA,IAAA,CAAA,MAAA,GAAA,CAAA,CAAA;AACA,UAAA,gBAAA,GAAA,KAAA,CAAA,OAAA,CAAA,YAAA,IAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA;AAEA,UAAA,eAAA,GAAA,gBAAA,GAAA,KAAA,CAAA,MAAA;AACA,aAAA,KAAA,CAAA,eAAA,CAAA;AACA,KA9CA;AAqDA,IAAA,cArDA,4BAqDA;AAEA;AACA,UAAA,gBAAA,GAAA,KAAA,KAAA,CAAA,MAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,sBAAA,EAAA,gBAAA;;AACA,WAAA,IAAA,CAAA,IAAA,KAAA,KAAA,EAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAAA;AACA;AACA,KA7DA;AA+DA,IAAA,iBA/DA,+BA+DA,CAEA;AAjEA;AAlBA,CAAA","sourcesContent":["<template>\n  <v-container class=\"pa-0\">\n      <v-row v-for=\"(i, index) in getCurrentStringCount + 1\" :key=\"index\" style=\"width: 40px; height: 30px;\">\n          <v-text-field v-if=\"index === getCurrentStringCount\" class=\"centered-input small-text-size\" @input=\"tabEntered($event, i)\" v-model=\"chordName\"></v-text-field>\n          <v-text-field v-else class=\"centered-input\" @input=\"tabEntered($event, i)\"></v-text-field>\n      </v-row>\n  </v-container>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            chord: [],\n            chordName: '',\n            currentTuning: []\n        }\n    },\n    props: {    \n        tabColumn: {\n            default: 0\n        },\n    },\n    computed: {\n        getCurrentStringCount() {\n            return this.$store.state.seletectedNumberOfStrings\n        },\n    },\n    methods: {\n        tabEntered($event, i){\n            if($event !== ''){\n                let note = {\n                    fret: $event,\n                    string: i,\n                    stringNote: this.getCurrentTuning()[i - 1],\n                    newNote: ''\n                }\n                let returnedNote = this.noteName(note)\n                note.newNote = returnedNote\n\n                if(this.chord.length === 0){\n                    this.chord.push(note)\n                }\n                \n                // checking to see if a note exists on the string already //\n                // if it does, replace it with whats on the fret //\n                // if not, then add it //\n                const index1 = this.chord.findIndex(ele => ele.string === note.string)\n                if(index1 !== -1) {\n                    this.chord[index1] = note\n                }else{\n                    this.chord.push(note)\n                }\n            }else{\n                // if the string is empty, remove it from the array //\n                const index2 = this.chord.findIndex(ele => ele.string === i)\n                if(index2 !== -1) {\n                    this.chord.splice(index2, 1)\n                }\n            }\n            this.analyzingNotes()\n        },\n        getCurrentTuning() {\n            return this.$store.state.overallTuningNotes\n        },\n        noteName(note) {\n            let currentTuning = this.getCurrentTuning()\n            let notes = this.$store.state.tuningsList\n\n            let startingNote = currentTuning[note.string - 1]\n            let enteredNoteIndex = notes.indexOf(startingNote) + parseInt(note.fret)\n\n            let actualNoteIndex = enteredNoteIndex % notes.length\n            return notes[actualNoteIndex]\n        },\n\n\n\n\n\n\n        analyzingNotes() {\n\n            // first I think I need to get my chord note count //\n            let noteCountInChord = this.chord.length\n            console.log('Chord note count -> ', noteCountInChord)\n            for(var l in this.chord) {\n                console.log(this.chord[l].newNote)\n            }\n        },\n\n        figureOutRootNote() {\n            \n        }\n    },\n}\n</script>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<style scoped>\n    .centered-input >>> input{\n        text-align: center; \n        color: blue;\n        \n    }\n    .small-text-size {\n        font-size: 10px;\n    }\n    .v-text-field >>> .v-input__slot::before {\n        padding-top: 17px;\n        border-color: white;\n    }\n</style>"],"sourceRoot":"src/components"}]}