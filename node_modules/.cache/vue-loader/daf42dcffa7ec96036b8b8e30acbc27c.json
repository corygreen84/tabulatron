{"remainingRequest":"/Users/corygreen/Desktop/music-notation-project/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/corygreen/Desktop/music-notation-project/node_modules/vue-music-notation/src/components/Staff.vue?vue&type=style&index=0&id=5a63fdce&scoped=true&lang=css&","dependencies":[{"path":"/Users/corygreen/Desktop/music-notation-project/node_modules/vue-music-notation/src/components/Staff.vue","mtime":1642705062602},{"path":"/Users/corygreen/Desktop/music-notation-project/node_modules/css-loader/dist/cjs.js","mtime":1642660804571},{"path":"/Users/corygreen/Desktop/music-notation-project/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1642660804697},{"path":"/Users/corygreen/Desktop/music-notation-project/node_modules/postcss-loader/src/index.js","mtime":1642660804690},{"path":"/Users/corygreen/Desktop/music-notation-project/node_modules/cache-loader/dist/cjs.js","mtime":1642660805177},{"path":"/Users/corygreen/Desktop/music-notation-project/node_modules/vue-loader/lib/index.js","mtime":1642660804693}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmNvbnRhaW5lciB7CiAgZGlzcGxheTogaW5saW5lLWJsb2NrOwp9Ci5hY3RpdmUgewogIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Ymx1ZTsKfQo="},{"version":3,"sources":["Staff.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgSA;AACA;AACA;AACA;AACA;AACA","file":"Staff.vue","sourceRoot":"node_modules/vue-music-notation/src/components","sourcesContent":["<template>\n  <svg\n    :width=\"width\"\n    :height=\"height\"\n    :class=\"{ container: true, active: active }\"\n    @click=\"onClick\"\n  >\n    <line\n      :x1=\"line.x1\"\n      :y1=\"line.y1\"\n      :x2=\"line.x2\"\n      :y2=\"line.y2\"\n      v-for=\"line in lines\"\n      :key=\"line.y1 + line.width\"\n      :style=\"`stroke:black;stroke-width:${line.width}`\"\n    />\n    <TrebleClef\n      :y=\"trebleClefStart\"\n      :x=\"5\"\n      v-if=\"showBrace && showTrebleClef\"\n    />\n    <BassClef\n      :y=\"bassClefStart\"\n      :x=\"10\"\n      v-if=\"showBrace && showBassClef\"\n    />\n    <Note\n      :x=\"note.x\"\n      :y=\"note.y\"\n      v-for=\"note in notePositions\"\n      :key=\"`note_${note.x}_${note.y}`\"\n    />\n    <Sharp\n      :x=\"sharp.x\"\n      :y=\"sharp.y\"\n      v-for=\"sharp in sharpPositions\"\n      :key=\"`sharp_${sharp.x}_${sharp.y}`\"\n    />\n  </svg>\n</template>\n\n<script>\nimport TrebleClef from './base/TrebleClef';\nimport BassClef from './base/BassClef';\nimport Note from './base/Note';\nimport Sharp from './base/Sharp';\n\nconst LINE_HEIGHT = 10;\nconst TOP_OFFSET = 3;\n\nconst NOTE_OFFSETS = [\n  { position: 0 },                  // C\n  { position: 0, sharp: 1 },        // C#\n  { position: 1 },                  // D\n  { position: 1, sharp: 1 },        // D#\n  { position: 2 },                  // E\n  { position: 3 },                  // F\n  { position: 3, sharp: 1 },        // F#\n  { position: 4 },                  // G\n  { position: 4, sharp: 1 },        // G#\n  { position: 5 },                  // A\n  { position: 5, sharp: 1 },        // A#\n  { position: 6 },                  // B\n];\n\nconst buildStaffLines = (lines, start, lineHeight, width) => {\n  const out = [];\n  lines.forEach((line) => {\n    out.push({\n      x1: 0,\n      x2: width,\n      y1: start - line * lineHeight,\n      y2: start - line * lineHeight,\n      width: 1,\n    });\n  });\n  return out;\n};\n\nconst getLine = (note) => \n  NOTE_OFFSETS[note % 12].position - ((5 - Math.floor(note / 12)) * 7);\n\nconst getNotesInfo = (notes) => {\n  let hasSharp = false;\n  let hasBassNotes = false;\n  let hasEven = false;\n  let hasOdd = false;\n  if (notes) {\n    notes.forEach((note) => {\n      const noteInOctave = note % 12;\n      if(NOTE_OFFSETS[noteInOctave].sharp) {\n        hasSharp = true;\n      }\n      if (note < 58) {\n        hasBassNotes = true;\n      }\n\n      if (getLine(note) % 2 === 0) {\n        hasEven = true;\n      } else {\n        hasOdd = true;\n      }\n    });\n  }\n  return {\n    hasSharp,\n    hasBassNotes,\n    hasEven,\n    hasOdd,\n    bothSides: hasEven && hasOdd,\n  };\n};\n\nexport default {\n  inject: {\n    showTrebleClef: {\n      default: false,\n    },\n    showBassClef: {\n      default: false,\n    }\n  },\n  props: {\n    showBrace: {\n      default: false,\n    },\n    showEnd: {\n      default: false,\n    },\n    notes: {\n      default: null,\n    },\n    active: {\n      default: false,\n    },\n  },\n  data() {\n    const height = \n      (this.showTrebleClef ? LINE_HEIGHT * 6 : 0) +\n      (this.showBassClef ? LINE_HEIGHT * 6 : 0) +\n      (this.showBassClef && this.showTrebleClef ? LINE_HEIGHT * 6 : 0);\n\n    const info = getNotesInfo(this.notes);\n\n    let width = this.showBrace ? 45 : info.bothSides ? 31 : 20;\n    if (this.showEnd && !this.showBrace && !this.notes) {\n      width = 2;\n    }\n\n    if (info.hasSharp) {\n      width += 14;\n    }\n\n    const linePositions = {};\n    if (this.showTrebleClef) {\n      for (let i = 1; i < 6; i++) {\n        linePositions[i] = 1;\n      }\n    }\n    if (this.showBassClef) {\n      for (let i = -3; i > -8; i--) {\n        linePositions[i] = 1;\n      }\n    }\n\n    let lines = [];\n    let top = TOP_OFFSET;\n    let trebleClefStart = 0;\n    let bassClefStart = 0;\n    let middleC = null;\n    if (this.showTrebleClef) {\n      trebleClefStart = (LINE_HEIGHT * top) - 11;\n      if (this.showEnd) {\n        lines.push({\n          x1: 1,\n          x2: 1,\n          y1: top * LINE_HEIGHT,\n          y2: (top + 4) * LINE_HEIGHT,\n          width: 3,\n        });\n      }\n      middleC = (LINE_HEIGHT * top) + (LINE_HEIGHT * 4.5);\n      top += 8;\n    }\n    if (this.showBassClef) {\n      if (!middleC) {\n        middleC = (LINE_HEIGHT * top) - (LINE_HEIGHT * 3.5);\n      }\n      bassClefStart = LINE_HEIGHT * top;\n      if (this.showEnd) {\n        lines.push({\n          x1: 1,\n          x2: 1,\n          y1: top * LINE_HEIGHT,\n          y2: (top + 4) * LINE_HEIGHT,\n          width: 3,\n        });\n      }\n    }\n\n    const notePositions = [];\n    const sharpPositions = [];\n    if (this.notes) {\n      let evenNote = 0;\n      let oddNote = 13;\n\n      if (!info.bothSides) {\n        evenNote = 2;\n        oddNote = 2;\n      }\n\n      if (info.hasSharp) {\n        evenNote += 6;\n        oddNote += 6;\n      }\n\n      this.notes.forEach((note) => {\n        const line = getLine(note);\n        notePositions.push({\n          x: (line % 2) === 0 ? evenNote : oddNote,\n          y: middleC - line * (LINE_HEIGHT / 2),\n        });\n        if(NOTE_OFFSETS[note % 12].sharp) {\n          sharpPositions.push({\n            x: (line % 2) === 0 ? evenNote - 6 : oddNote + 16,\n            y: (middleC - line * (LINE_HEIGHT / 2)) - 5,\n          });\n        }\n\n        const drawnLine = Math.floor(line/2);\n\n        if (drawnLine <= -8) {\n          for (let l = drawnLine; l <= -8; l+=1) {\n            linePositions[l] = 1;\n          }\n        } else if (drawnLine > -3 && drawnLine < 0) {\n          if (info.hasBassNotes) {\n            for (let l = -3; l <= drawnLine; l+=1) {\n              linePositions[l] = 1;\n            }\n          } else {\n            for (let l = 0; l > drawnLine; l-=1) {\n              linePositions[l] = 1;\n            }\n          }\n        } else if (drawnLine > 5) {\n          for (let l = 5; l <= drawnLine; l+=1) {\n            linePositions[l] = 1;\n          }\n        }\n      });\n    }\n\n    lines = [\n      ...lines,\n      ...buildStaffLines(\n        Object.keys(linePositions).map(l => parseInt(l)),\n        middleC + (LINE_HEIGHT/2),\n        LINE_HEIGHT,\n        width,\n      ),\n    ]\n\n    return {\n      lines,\n      width,\n      height,\n      trebleClefStart,\n      bassClefStart,\n      notePositions,\n      sharpPositions,\n    };\n  },\n  components: {\n    TrebleClef,\n    BassClef,\n    Note,\n    Sharp,\n  },\n  methods: {\n    onClick(e) {\n      this.$emit('click', e);\n    },\n  },\n}\n</script>\n\n<style scoped>\n.container {\n  display: inline-block;\n}\n.active {\n  background-color: lightblue;\n}\n</style>"]}]}