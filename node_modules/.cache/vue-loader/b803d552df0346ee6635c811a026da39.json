{"remainingRequest":"/Users/corygreen/Desktop/music-notation-project/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/corygreen/Desktop/music-notation-project/src/components/Tabulature.vue?vue&type=style&index=0&id=9f7c46ce&scoped=true&lang=css&","dependencies":[{"path":"/Users/corygreen/Desktop/music-notation-project/src/components/Tabulature.vue","mtime":1642802344000},{"path":"/Users/corygreen/Desktop/music-notation-project/node_modules/css-loader/dist/cjs.js","mtime":1642660804000},{"path":"/Users/corygreen/Desktop/music-notation-project/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1642660804000},{"path":"/Users/corygreen/Desktop/music-notation-project/node_modules/postcss-loader/src/index.js","mtime":1642660804000},{"path":"/Users/corygreen/Desktop/music-notation-project/node_modules/cache-loader/dist/cjs.js","mtime":1642660805000},{"path":"/Users/corygreen/Desktop/music-notation-project/node_modules/vue-loader/lib/index.js","mtime":1642660804000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmNlbnRlcmVkLWlucHV0ID4+PiBpbnB1dHsKICAgIHRleHQtYWxpZ246IGNlbnRlcjsgCiAgICBjb2xvcjogYmx1ZTsKfQoKLnYtdGV4dC1maWVsZCA+Pj4gLnYtaW5wdXRfX3Nsb3Q6OmJlZm9yZSB7CiAgICBwYWRkaW5nLXRvcDogMTdweDsKfQoK"},{"version":3,"sources":["Tabulature.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+GA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"Tabulature.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <v-container class=\"pa-0\">\n      <v-row v-for=\"(i, string) in returnOverallTuning\" :key=\"string\" class=\"pa-0\" style=\"height: 30px;\">\n          <div style=\"padding-top: 20px; padding-right: 10px;\">{{i}}</div>\n          <v-text-field single-line v-for=\"(j, column) in 20\" :key=\"column\" style=\"width: 20px;\" class=\"centered-input\" @input=\"tabField($event, string, column)\"></v-text-field>\n      </v-row>\n  </v-container>\n</template>\n\n<script>\nexport default {\n    data(){\n        return {\n            tabMap: []\n        }\n    },\n    methods: {\n        tabField($event, string, column){\n            if($event === ''){\n                delete this.tabMap[string + '-' + column]\n            }else{\n                //this.tabMap[string + '-' + column] = $event\n                let tab = {\n                    column: column,\n                    string: string,\n                    fret: $event\n                }\n                this.tabMap.push(tab)\n            }\n            this.$store.dispatch('changeTabMapping', this.tabMap)\n        }\n    },\n    watch: {\n        clearAll(){\n            // clear all pressed //\n        }\n    },\n    computed: {\n        clearAll() {\n            return this.$store.state.clearAll\n        },\n        figureDropTuning() {\n            let notes = this.$store.state.tuningsList\n            let selectedTuning = this.$store.state.selectedTuning\n            let dropTuned = this.$store.state.dropTuningEnabled\n            let dropTunedDegree = this.$store.state.selectedDropTuning\n\n            let currentTuningIndex = notes.indexOf(selectedTuning)\n            if(dropTuned) {\n                currentTuningIndex = notes.indexOf(selectedTuning) + dropTunedDegree\n                if(currentTuningIndex < 0) {\n                    currentTuningIndex = Math.abs(currentTuningIndex)\n                }\n            }\n            // if not drop tuned then we just return the selected tuning without it //\n            return notes[currentTuningIndex]\n        },\n        returnOverallTuning() {\n            let returnArrayOfNotes = []\n            let returnArrayOfIndexes = []\n            let notes = this.$store.state.tuningsList\n\n            // getting the first note (lowest string) //\n            let firstNote = this.figureDropTuning\n            let firstNoteIndex = notes.indexOf(firstNote)\n\n            // pushing the first note and index into the arrays //\n            returnArrayOfNotes.push(firstNote)\n            returnArrayOfIndexes.push(firstNoteIndex)\n\n            // taking into account number of strings //\n            let stringCount = this.$store.state.seletectedNumberOfStrings\n\n            let startingNote = this.$store.state.selectedTuning\n            let startingIndex = notes.indexOf(startingNote)\n\n            // going forward we will actually be figuring out the series off notes after the //\n            // first note //\n            for(let i = 1; i < stringCount; i++) {\n                if(i === 4 && stringCount !== 5){\n                    startingIndex = startingIndex + 4\n                }else{\n                    startingIndex = startingIndex + 5\n                }\n                if(startingIndex > notes.length - 1){\n                    startingIndex = startingIndex - notes.length\n                }\n                returnArrayOfNotes.push(notes[startingIndex])\n                returnArrayOfIndexes.push(startingIndex)\n            }\n\n            this.$store.dispatch('changeTuningNotes', returnArrayOfNotes)\n            this.$store.dispatch('changeTuningIndexes', returnArrayOfIndexes)\n\n            return returnArrayOfNotes.reverse()\n        }\n    }\n}\n</script>\n\n\n\n\n\n\n\n\n\n\n\n<style scoped>\n    .centered-input >>> input{\n        text-align: center; \n        color: blue;\n    }\n\n    .v-text-field >>> .v-input__slot::before {\n        padding-top: 17px;\n    }\n\n</style>"]}]}