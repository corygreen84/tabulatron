{"remainingRequest":"/Users/corygreen/Desktop/tabulatron/tabulatron/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/corygreen/Desktop/tabulatron/tabulatron/src/components/NewTablature.vue?vue&type=style&index=0&id=274bb6ae&scoped=true&lang=css&","dependencies":[{"path":"/Users/corygreen/Desktop/tabulatron/tabulatron/src/components/NewTablature.vue","mtime":1642970316597},{"path":"/Users/corygreen/Desktop/tabulatron/tabulatron/node_modules/css-loader/dist/cjs.js","mtime":1642660804000},{"path":"/Users/corygreen/Desktop/tabulatron/tabulatron/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1642660804000},{"path":"/Users/corygreen/Desktop/tabulatron/tabulatron/node_modules/postcss-loader/src/index.js","mtime":1642660804000},{"path":"/Users/corygreen/Desktop/tabulatron/tabulatron/node_modules/cache-loader/dist/cjs.js","mtime":1642660805000},{"path":"/Users/corygreen/Desktop/tabulatron/tabulatron/node_modules/vue-loader/lib/index.js","mtime":1642660804000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5jZW50ZXJlZC1pbnB1dCA+Pj4gaW5wdXR7CiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7IAogICAgY29sb3I6IHJlZDsKfQoudi10ZXh0LWZpZWxkID4+PiAudi1pbnB1dF9fc2xvdDpiZWZvcmUgewogICAgYm9yZGVyLXN0eWxlOiBub25lOwp9IAoudi10ZXh0LWZpZWxkID4+PiAudi1pbnB1dF9fc2xvdDo6YmVmb3JlIHsKICAgIHBhZGRpbmctdG9wOiAxN3B4OwogICAgYm9yZGVyLWNvbG9yOiB3aGl0ZTsKfQoK"},{"version":3,"sources":["NewTablature.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"NewTablature.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <v-container>\n        <v-row class=\"pa-0\">\n            <v-col cols=\"auto\" v-for=\"(i, index) in 25\" :key=\"index\">\n                <v-container v-if=\"index === 0\" class=\"pa-0 \">\n                    <v-row v-for=\"(j, ind) in returnOverallTuning\" :key=\"ind\" style=\"width: 40px; height: 30px;\">\n                        <v-text-field class=\"centered-input\" :value=\"j\" readonly></v-text-field>\n                    </v-row>\n                </v-container>\n                <Chord :tabColumn=\"i\" v-else/>\n            </v-col>\n        </v-row>\n    </v-container>\n</template>\n\n<script>\nimport Chord from './Chord.vue'\nexport default {\n    components: {\n        Chord\n    },\n    computed: {\n        clearAll() {\n            return this.$store.state.clearAll\n        },\n        figureDropTuning() {\n            let notes = this.$store.state.tuningsList\n            let selectedTuning = this.$store.state.selectedTuning\n            let dropTuned = this.$store.state.dropTuningEnabled\n            let dropTunedDegree = this.$store.state.selectedDropTuning\n\n            let currentTuningIndex = notes.indexOf(selectedTuning)\n            if(dropTuned) {\n                currentTuningIndex = notes.indexOf(selectedTuning) + dropTunedDegree\n                if(currentTuningIndex < 0) {\n                    currentTuningIndex = Math.abs(currentTuningIndex)\n                }\n            }\n            // if not drop tuned then we just return the selected tuning without it //\n            return notes[currentTuningIndex]\n        },\n        returnOverallTuning() {\n            let returnArrayOfNotes = []\n            let returnArrayOfIndexes = []\n            let notes = this.$store.state.tuningsList\n\n            // getting the first note (lowest string) //\n            let firstNote = this.figureDropTuning\n            let firstNoteIndex = notes.indexOf(firstNote)\n\n            // pushing the first note and index into the arrays //\n            returnArrayOfNotes.push(firstNote)\n            returnArrayOfIndexes.push(firstNoteIndex)\n\n            // taking into account number of strings //\n            let stringCount = this.$store.state.seletectedNumberOfStrings\n\n            let startingNote = this.$store.state.selectedTuning\n            let startingIndex = notes.indexOf(startingNote)\n\n            // going forward we will actually be figuring out the series off notes after the //\n            // first note //\n            for(let i = 1; i < stringCount; i++) {\n                if(i === 4 && stringCount !== 5){\n                    startingIndex = startingIndex + 4\n                }else{\n                    startingIndex = startingIndex + 5\n                }\n                if(startingIndex > notes.length - 1){\n                    startingIndex = startingIndex - notes.length\n                }\n                returnArrayOfNotes.push(notes[startingIndex])\n                returnArrayOfIndexes.push(startingIndex)\n            }\n\n            this.$store.dispatch('changeTuningNotes', returnArrayOfNotes)\n            this.$store.dispatch('changeTuningIndexes', returnArrayOfIndexes)\n\n            return returnArrayOfNotes.reverse()\n        }\n    },\n}\n</script>\n\n<style scoped>\n    .centered-input >>> input{\n        text-align: center; \n        color: red;\n    }\n    .v-text-field >>> .v-input__slot:before {\n        border-style: none;\n    } \n    .v-text-field >>> .v-input__slot::before {\n        padding-top: 17px;\n        border-color: white;\n    }\n\n</style>"]}]}