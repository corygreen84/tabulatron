{"remainingRequest":"/Users/corygreen/Desktop/tabulatron/tabulatron/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/corygreen/Desktop/tabulatron/tabulatron/node_modules/vue-music-notation/src/components/Keyboard.vue?vue&type=style&index=0&id=5abd2fbe&scoped=true&lang=css&","dependencies":[{"path":"/Users/corygreen/Desktop/tabulatron/tabulatron/node_modules/vue-music-notation/src/components/Keyboard.vue","mtime":1642705062000},{"path":"/Users/corygreen/Desktop/tabulatron/tabulatron/node_modules/css-loader/dist/cjs.js","mtime":1642660804000},{"path":"/Users/corygreen/Desktop/tabulatron/tabulatron/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1642660804000},{"path":"/Users/corygreen/Desktop/tabulatron/tabulatron/node_modules/postcss-loader/src/index.js","mtime":1642660804000},{"path":"/Users/corygreen/Desktop/tabulatron/tabulatron/node_modules/cache-loader/dist/cjs.js","mtime":1642660805000},{"path":"/Users/corygreen/Desktop/tabulatron/tabulatron/node_modules/vue-loader/lib/index.js","mtime":1642660804000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLm5hdHVyYWwgewogIGZpbGw6IHdoaXRlOwogIHN0cm9rZS13aWR0aDogMTsKICBzdHJva2U6IGJsYWNrOwp9Cgouc2hhcnAgewogIGZpbGw6IGJsYWNrOwogIHN0cm9rZS13aWR0aDogMTsKICBzdHJva2U6IGJsYWNrOwp9CgouYWN0aXZlIHsKICBmaWxsOiBsaWdodGJsdWU7Cn0K"},{"version":3,"sources":["Keyboard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqHA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"Keyboard.vue","sourceRoot":"node_modules/vue-music-notation/src/components","sourcesContent":["<template>\n  <svg\n    :width=\"width\"\n    :height=\"height\"\n    style=\"shape-rendering: crispEdges;\"\n  >\n    <path\n      :d=\"path.path\"\n      :class=\"{ [path.className]: true, active: path.active }\"\n      :key=\"path.note\"\n      v-for=\"path in keys\"\n    />\n  </svg>\n</template>\n\n<script>\nconst KEYSHAPES = [\n  { type: 0, right: 1 },          // C\n  { type: 1 },                    // C#\n  { type: 0, right: 1, left: 1 }, // D\n  { type: 1 },                    // D#\n  { type: 0, left: 1 },           // E\n  { type: 0, right: 1 },          // F\n  { type: 1 },                    // F#\n  { type: 0, right: 1, left: 1 }, // G\n  { type: 1 },                    // G#\n  { type: 0, right: 1, left: 1 }, // A\n  { type: 1 },                    // A#\n  { type: 0, left: 1 },           // B\n];\nconst NATURAL_WIDTH = 13;\nconst NATURAL_HEIGHT = NATURAL_WIDTH * 5.5;\nconst SHARP_WIDTH = NATURAL_WIDTH / 2;\nconst SHARP_HEIGHT = NATURAL_HEIGHT / 2;\n\nexport default {\n  props: {\n    length: {\n      default: 88,\n    },\n    start: {\n      default: 21,\n    },\n    notes: {\n      default: [],\n    },\n  },\n  data() {\n    const isActive = {};\n    this.notes.forEach(n => isActive[n] = true);\n\n    const keys = [];\n\n    let position = -NATURAL_WIDTH;\n    position += 1;\n    let wasSharp = false;\n    for (let note = this.start; note < this.start + this.length; note++) {\n      const shape = { ...KEYSHAPES[note % 12] };\n      if (note === this.start) {\n        delete shape.left;\n      }\n      if (note === (this.start + this.length) -1) {\n        delete shape.right;\n      }\n\n      let path = '';\n      let className = '';\n      if (shape.type === 0) {\n        position += wasSharp ? (SHARP_WIDTH / 2) : NATURAL_WIDTH;\n        wasSharp = false;\n\n        if (shape.right && shape.left) {\n          path = `M ${position} ${NATURAL_HEIGHT + 1} v ${-SHARP_HEIGHT} `;\n          path += `h ${(SHARP_WIDTH / 2)} v ${-SHARP_HEIGHT} `;\n          path += `h ${NATURAL_WIDTH - SHARP_WIDTH} v ${SHARP_HEIGHT} h ${SHARP_WIDTH / 2} `;\n          path += `v ${SHARP_HEIGHT} h ${-NATURAL_WIDTH}`;\n        } else if (shape.right) {\n          path = `M ${position} ${NATURAL_HEIGHT + 1} v ${-NATURAL_HEIGHT} `;\n          path += `h ${NATURAL_WIDTH - (SHARP_WIDTH / 2)} v ${SHARP_HEIGHT} `;\n          path += `h ${SHARP_WIDTH / 2} v ${SHARP_HEIGHT} h ${-NATURAL_WIDTH}`;\n        } else if (shape.left) {\n          path = `M ${position} ${NATURAL_HEIGHT + 1} v ${-SHARP_HEIGHT} `;\n          path += `h ${SHARP_WIDTH / 2} v ${-SHARP_HEIGHT} `;\n          path += `h ${NATURAL_WIDTH - (SHARP_WIDTH / 2)} v ${NATURAL_HEIGHT} h ${-NATURAL_WIDTH}`;\n        } else {\n          path = `M ${position} ${NATURAL_HEIGHT + 1} v ${-NATURAL_HEIGHT} `;\n          path += `h ${NATURAL_WIDTH} v ${NATURAL_HEIGHT} h ${-NATURAL_WIDTH}`;\n        }\n        className = 'natural';\n      } else {\n        position += NATURAL_WIDTH - (SHARP_WIDTH / 2);\n\n        path = `M ${position} ${SHARP_HEIGHT + 1} v ${-SHARP_HEIGHT} `;\n        path += `h ${SHARP_WIDTH} v ${SHARP_HEIGHT} h ${-SHARP_WIDTH}`;\n\n        wasSharp = true;\n        className = 'sharp';\n      }\n\n      keys.push({\n        path,\n        className,\n        note,\n        active: isActive[note] !== undefined,\n      });\n    }\n\n    return {\n      keys,\n      height: NATURAL_HEIGHT + 2,\n      width: position + NATURAL_WIDTH + 2,\n    };\n  }\n}\n</script>\n\n<style scoped>\n.natural {\n  fill: white;\n  stroke-width: 1;\n  stroke: black;\n}\n\n.sharp {\n  fill: black;\n  stroke-width: 1;\n  stroke: black;\n}\n\n.active {\n  fill: lightblue;\n}\n</style>"]}]}