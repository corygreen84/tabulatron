{"remainingRequest":"/Users/corygreen/Desktop/tabulatron/tabulatron/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/corygreen/Desktop/tabulatron/tabulatron/node_modules/vue-music-notation/src/components/base/Tab.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/corygreen/Desktop/tabulatron/tabulatron/node_modules/vue-music-notation/src/components/base/Tab.vue","mtime":1642717691000},{"path":"/Users/corygreen/Desktop/tabulatron/tabulatron/node_modules/cache-loader/dist/cjs.js","mtime":1642660805000},{"path":"/Users/corygreen/Desktop/tabulatron/tabulatron/node_modules/babel-loader/lib/index.js","mtime":1642660805000},{"path":"/Users/corygreen/Desktop/tabulatron/tabulatron/node_modules/cache-loader/dist/cjs.js","mtime":1642660805000},{"path":"/Users/corygreen/Desktop/tabulatron/tabulatron/node_modules/vue-loader/lib/index.js","mtime":1642660804000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBjb25zdGFudHMgZnJvbSAnLi4vY29uc3RhbnRzJzsKCmV4cG9ydCBkZWZhdWx0IHsKICBwcm9wczogewogICAgc3RyaW5nQ291bnQ6IHsKICAgICAgZGVmYXVsdDogNiwKICAgIH0sCiAgICBjaG9yZDogewogICAgICBkZWZhdWx0OiAoKSA9PiBbIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEgXSwKICAgIH0sCiAgICB0YWJJbmRleDogewogICAgICBkZWZhdWx0OiAwLAogICAgfSwKICB9LAogIGRhdGEoKSB7CiAgICBjb25zdCBudW1iZXJzID0gW107CiAgICB0aGlzLmNob3JkLmZvckVhY2goKG51bWJlciwgc3RyaW5nKSA9PiB7CiAgICAgIGlmIChudW1iZXIgPiAtMSkgewogICAgICAgIG51bWJlcnMucHVzaCh7CiAgICAgICAgICB5OiAoY29uc3RhbnRzLnRhYnVsYXR1cmUuTElORV9IRUlHSFQgKiAodGhpcy5zdHJpbmdDb3VudCAtIHN0cmluZykpICsgKGNvbnN0YW50cy50YWJ1bGF0dXJlLkxJTkVfSEVJR0hUIC8gMiksCiAgICAgICAgICBzdHJpbmcsCiAgICAgICAgICBudW1iZXIsCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0pOwogICAgY29uc3QgbGluZXMgPSBbXTsKICAgIGZvciAobGV0IHN0cmluZyA9IDA7IHN0cmluZyA8IHRoaXMuc3RyaW5nQ291bnQ7IHN0cmluZysrKSB7CiAgICAgIGxpbmVzLnB1c2goewogICAgICAgIHk6IChjb25zdGFudHMudGFidWxhdHVyZS5MSU5FX0hFSUdIVCAqICh0aGlzLnN0cmluZ0NvdW50IC0gc3RyaW5nKSkgKyAoY29uc3RhbnRzLnRhYnVsYXR1cmUuTElORV9IRUlHSFQgLyAyKSwKICAgICAgfSk7CiAgICB9CiAgICByZXR1cm4gewogICAgICBudW1iZXJzLAogICAgICBsaW5lcywKICAgICAgbGluZUhlaWdodDogY29uc3RhbnRzLnRhYnVsYXR1cmUuTElORV9IRUlHSFQsCiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["Tab.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Tab.vue","sourceRoot":"node_modules/vue-music-notation/src/components/base","sourcesContent":["<template>\n\n  \n  <svg\n    style=\"display: inline;\"\n    width=\"20\"\n    :height=\"(stringCount + 1) * lineHeight\"\n  >\n    <line\n      x1=\"0\"\n      x2=\"20\"\n      :y1=\"line.y\"\n      :y2=\"line.y\"\n      style=\"stroke-width: 1; stroke: black;\"\n      v-for=\"line in lines\"\n      :key=\"`line_${line.y}`\"\n    />\n    <line\n      x1=\"3\"\n      x2=\"18\"\n      :y1=\"number.y\"\n      :y2=\"number.y\"\n      style=\"stroke-width: 1; stroke: white;\"\n      v-for=\"number in numbers\"\n      :key=\"`line_${tabIndex}_${number.number}_${number.y}`\"\n    />\n    <text\n      x=\"16\"\n      :y=\"number.y + (lineHeight / 3.5)\"\n      :style=\"`font-size: ${lineHeight * 0.8}px;`\"\n      class=\"number\"\n      v-for=\"number in numbers\"\n      :key=\"`chord_${tabIndex}_${number.number}_${number.y}`\"\n    >\n      {{ number.number }}\n    </text>\n  </svg>\n\n</template>\n\n<script>\nimport constants from '../constants';\n\nexport default {\n  props: {\n    stringCount: {\n      default: 6,\n    },\n    chord: {\n      default: () => [ -1, -1, -1, -1, -1, -1 ],\n    },\n    tabIndex: {\n      default: 0,\n    },\n  },\n  data() {\n    const numbers = [];\n    this.chord.forEach((number, string) => {\n      if (number > -1) {\n        numbers.push({\n          y: (constants.tabulature.LINE_HEIGHT * (this.stringCount - string)) + (constants.tabulature.LINE_HEIGHT / 2),\n          string,\n          number,\n        });\n      }\n    });\n    const lines = [];\n    for (let string = 0; string < this.stringCount; string++) {\n      lines.push({\n        y: (constants.tabulature.LINE_HEIGHT * (this.stringCount - string)) + (constants.tabulature.LINE_HEIGHT / 2),\n      });\n    }\n    return {\n      numbers,\n      lines,\n      lineHeight: constants.tabulature.LINE_HEIGHT,\n    }\n  }\n}\n</script>\n\n<style scoped>\n.number {\n  color: black;\n  background: white;\n  padding-left: 2px;\n  padding-right: 2px;\n  text-anchor: end;\n  font-family: Arial, Verdana, Sans-Serif;\n}\n</style>"]}]}