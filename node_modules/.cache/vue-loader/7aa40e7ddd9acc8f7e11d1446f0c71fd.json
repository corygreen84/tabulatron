{"remainingRequest":"/Users/corygreen/Desktop/tabulatron/tabulatron/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/corygreen/Desktop/tabulatron/tabulatron/src/components/Chord.vue?vue&type=style&index=0&id=30bc6a5c&scoped=true&lang=css&","dependencies":[{"path":"/Users/corygreen/Desktop/tabulatron/tabulatron/src/components/Chord.vue","mtime":1643223943761},{"path":"/Users/corygreen/Desktop/tabulatron/tabulatron/node_modules/css-loader/dist/cjs.js","mtime":1642660804000},{"path":"/Users/corygreen/Desktop/tabulatron/tabulatron/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1642660804000},{"path":"/Users/corygreen/Desktop/tabulatron/tabulatron/node_modules/postcss-loader/src/index.js","mtime":1642660804000},{"path":"/Users/corygreen/Desktop/tabulatron/tabulatron/node_modules/cache-loader/dist/cjs.js","mtime":1642660805000},{"path":"/Users/corygreen/Desktop/tabulatron/tabulatron/node_modules/vue-loader/lib/index.js","mtime":1642660804000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouY2VudGVyZWQtaW5wdXQgPj4+IGlucHV0ewogICAgdGV4dC1hbGlnbjogY2VudGVyOyAKICAgIGNvbG9yOiBibHVlOwogICAgCn0KLnNtYWxsLXRleHQtc2l6ZSB7CiAgICBmb250LXNpemU6IDEwcHg7Cn0KLnYtdGV4dC1maWVsZCA+Pj4gLnYtaW5wdXRfX3Nsb3Q6OmJlZm9yZSB7CiAgICBwYWRkaW5nLXRvcDogMTdweDsKICAgIGJvcmRlci1jb2xvcjogd2hpdGU7Cn0K"},{"version":3,"sources":["Chord.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoHA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Chord.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <v-container class=\"pa-0\">\n      <v-row v-for=\"(i, index) in getCurrentStringCount + 1\" :key=\"index\" style=\"width: 40px; height: 30px;\">\n          <v-text-field v-if=\"index === getCurrentStringCount\" class=\"centered-input small-text-size\" @input=\"tabEntered($event, i)\" v-model=\"chordName\"></v-text-field>\n          <v-text-field v-else class=\"centered-input\" @input=\"tabEntered($event, i)\"></v-text-field>\n      </v-row>\n  </v-container>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            chord: [],\n            chordName: '',\n            currentTuning: []\n        }\n    },\n    props: {    \n        tabColumn: {\n            default: 0\n        },\n    },\n    computed: {\n        getCurrentStringCount() {\n            return this.$store.state.seletectedNumberOfStrings\n        },\n    },\n    methods: {\n        tabEntered($event, i){\n            if($event !== ''){\n                let note = {\n                    fret: $event,\n                    string: i,\n                    stringNote: this.getCurrentTuning()[i - 1],\n                    newNote: ''\n                }\n                let returnedNote = this.noteName(note)\n                note.newNote = returnedNote\n\n                if(this.chord.length === 0){\n                    this.chord.push(note)\n                }\n                \n                // checking to see if a note exists on the string already //\n                // if it does, replace it with whats on the fret //\n                // if not, then add it //\n                const index1 = this.chord.findIndex(ele => ele.string === note.string)\n                if(index1 !== -1) {\n                    this.chord[index1] = note\n                }else{\n                    this.chord.push(note)\n                }\n            }else{\n                // if the string is empty, remove it from the array //\n                const index2 = this.chord.findIndex(ele => ele.string === i)\n                if(index2 !== -1) {\n                    this.chord.splice(index2, 1)\n                }\n            }\n            this.analyzingNotes()\n        },\n        getCurrentTuning() {\n            return this.$store.state.overallTuningNotes\n        },\n        noteName(note) {\n            let currentTuning = this.getCurrentTuning()\n            let notes = this.$store.state.tuningsList\n\n            let startingNote = currentTuning[note.string - 1]\n            let enteredNoteIndex = notes.indexOf(startingNote) + parseInt(note.fret)\n\n            let actualNoteIndex = enteredNoteIndex % notes.length\n            return notes[actualNoteIndex]\n        },\n\n\n\n\n\n\n        analyzingNotes() {\n\n            // first I think I need to get my chord note count //\n            let noteCountInChord = this.chord.length\n            console.log('Chord note count -> ', noteCountInChord)\n            for(var l in this.chord) {\n                console.log(this.chord[l].newNote)\n            }\n        },\n\n        figureOutRootNote() {\n            \n        }\n    },\n}\n</script>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<style scoped>\n    .centered-input >>> input{\n        text-align: center; \n        color: blue;\n        \n    }\n    .small-text-size {\n        font-size: 10px;\n    }\n    .v-text-field >>> .v-input__slot::before {\n        padding-top: 17px;\n        border-color: white;\n    }\n</style>"]}]}