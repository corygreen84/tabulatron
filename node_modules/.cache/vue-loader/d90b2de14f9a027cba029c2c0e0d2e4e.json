{"remainingRequest":"/Users/corygreen/Desktop/music-notation-project/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/corygreen/Desktop/music-notation-project/node_modules/vue-music-notation/src/components/base/Tab.vue?vue&type=style&index=0&id=13cbca24&scoped=true&lang=css&","dependencies":[{"path":"/Users/corygreen/Desktop/music-notation-project/node_modules/vue-music-notation/src/components/base/Tab.vue","mtime":1642705062598},{"path":"/Users/corygreen/Desktop/music-notation-project/node_modules/css-loader/dist/cjs.js","mtime":1642660804571},{"path":"/Users/corygreen/Desktop/music-notation-project/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1642660804697},{"path":"/Users/corygreen/Desktop/music-notation-project/node_modules/postcss-loader/src/index.js","mtime":1642660804690},{"path":"/Users/corygreen/Desktop/music-notation-project/node_modules/cache-loader/dist/cjs.js","mtime":1642660805177},{"path":"/Users/corygreen/Desktop/music-notation-project/node_modules/vue-loader/lib/index.js","mtime":1642660804693}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5udW1iZXIgewogIGNvbG9yOiBibGFjazsKICBiYWNrZ3JvdW5kOiB3aGl0ZTsKICBwYWRkaW5nLWxlZnQ6IDJweDsKICBwYWRkaW5nLXJpZ2h0OiAycHg7CiAgdGV4dC1hbmNob3I6IGVuZDsKICBmb250LWZhbWlseTogQXJpYWwsIFZlcmRhbmEsIFNhbnMtU2VyaWY7Cn0K"},{"version":3,"sources":["Tab.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Tab.vue","sourceRoot":"node_modules/vue-music-notation/src/components/base","sourcesContent":["<template>\n  <svg\n    style=\"display: inline;\"\n    width=\"20\"\n    :height=\"(stringCount + 1) * lineHeight\"\n  >\n    <line\n      x1=\"0\"\n      x2=\"20\"\n      :y1=\"line.y\"\n      :y2=\"line.y\"\n      style=\"stroke-width: 1; stroke: black;\"\n      v-for=\"line in lines\"\n      :key=\"`line_${line.y}`\"\n    />\n    <line\n      x1=\"3\"\n      x2=\"18\"\n      :y1=\"number.y\"\n      :y2=\"number.y\"\n      style=\"stroke-width: 1; stroke: white;\"\n      v-for=\"number in numbers\"\n      :key=\"`line_${tabIndex}_${number.number}_${number.y}`\"\n    />\n    <text\n      x=\"16\"\n      :y=\"number.y + (lineHeight / 3.5)\"\n      :style=\"`font-size: ${lineHeight * 0.8}px;`\"\n      class=\"number\"\n      v-for=\"number in numbers\"\n      :key=\"`chord_${tabIndex}_${number.number}_${number.y}`\"\n    >\n      {{ number.number }}\n    </text>\n  </svg>\n</template>\n\n<script>\nimport constants from '../constants';\n\nexport default {\n  props: {\n    stringCount: {\n      default: 6,\n    },\n    chord: {\n      default: () => [ -1, -1, -1, -1, -1, -1 ],\n    },\n    tabIndex: {\n      default: 0,\n    },\n  },\n  data() {\n    const numbers = [];\n    this.chord.forEach((number, string) => {\n      if (number > -1) {\n        numbers.push({\n          y: (constants.tabulature.LINE_HEIGHT * (this.stringCount - string)) + (constants.tabulature.LINE_HEIGHT / 2),\n          string,\n          number,\n        });\n      }\n    });\n    const lines = [];\n    for (let string = 0; string < this.stringCount; string++) {\n      lines.push({\n        y: (constants.tabulature.LINE_HEIGHT * (this.stringCount - string)) + (constants.tabulature.LINE_HEIGHT / 2),\n      });\n    }\n    return {\n      numbers,\n      lines,\n      lineHeight: constants.tabulature.LINE_HEIGHT,\n    }\n  }\n}\n</script>\n\n<style scoped>\n.number {\n  color: black;\n  background: white;\n  padding-left: 2px;\n  padding-right: 2px;\n  text-anchor: end;\n  font-family: Arial, Verdana, Sans-Serif;\n}\n</style>"]}]}